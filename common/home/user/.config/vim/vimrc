" --- Base config --- "

" XDG compliant environment
set runtimepath^=$HOME/.config/vim
set runtimepath+=$HOME/.config/vim/after
" Do not process vimfiles dir on Windows
set runtimepath-=$HOME/vimfiles
set runtimepath-=$HOME/vimfiles/after
if has('gui_running')
  source $HOME/.config/vim/gvimrc
endif
let &g:directory=$HOME . '/.cache/vim'
let &g:undodir=&g:directory . '/undo//'
let &g:backupdir=&g:directory . '/backup//'
let &viminfo=&viminfo . ',n' . &g:directory . '/viminfo'
let &g:directory.='/swap//'
" Create directories if they don't exist
if ! isdirectory(expand(&g:directory))
  silent! call mkdir(expand(&g:directory), 'p', 0700)
endif
if ! isdirectory(expand(&g:backupdir))
  silent! call mkdir(expand(&g:backupdir), 'p', 0700)
endif
if ! isdirectory(expand(&g:undodir))
  silent! call mkdir(expand(&g:undodir), 'p', 0700)
endif
" Enforce UTF-8
set encoding=utf-8
" When no filetype-specific indenting is enabled, new lines inherit above indentation
set autoindent
" Set the command window height to 2 lines, to avoid many cases of having to press <Enter> to continue
set cmdheight=2
" Always display the status line, even if only one window is displayed
set laststatus=2
" Switch on search pattern highlighting.
set hlsearch
" Set enrcyption method to blowfish
set cryptmethod=blowfish2
" Make vim case insensitive...
set ignorecase
" ...Except when we explicitly type a capital
set smartcase
" Jump to matches as you search
set incsearch
" Indicate a line is wrapped with '> '
set showbreak=>\ 
" Indent a wrapped line
set breakindent
" Wrap per word, not character (configured with 'breakat')
set linebreak
" Indent tabs less
set tabstop=2
set shiftwidth=2
" Use spaces instead of tabs
set expandtab
" Make backspace work as expected
set backspace=indent,eol,start
" Highlight strings inside C comments
let c_comment_strings=1
" Theme
colorscheme torte
" quick run terminal
nnoremap <silent> <Leader>r :.terminal ++noclose ++eof=exit ++shell<CR>
vnoremap <silent> <Leader>r :'<,'>terminal ++noclose ++eof=exit ++shell<CR>
" My own mru solution using dmenu
"noremap <C-p> :wv<CR>:e <C-r>=system("mruvim p")<CR><CR>
" Exit insert mode with jj
inoremap jj <Esc>
" Elevate vim under windows. Update me to use powershell elevation
"noremap <C-e> :mksession! ~/vimfiles/elevate.vim<Return>:silent exec '!elevate.exe ' . v:progname '-S C:/Users/Link/vimfiles/elevate.vim --cmd "let $HOME=''C:\Users\Link\''"'<Return>:q<Return>
" Don't write viminfo while editing an encrypted file
augroup Security
  autocmd vimleavepre * if strlen(&key) | set viminfo= | endif
augroup End

" --- Plugin config --- "

" Vim-plug package manager
call plug#begin()
" UI
Plug 'bling/vim-airline' "Fancy statusbar
Plug 'junegunn/goyo.vim' "Distraction free reading and writing
Plug 'junegunn/limelight.vim' "Highlight current paragraph
" Tools
Plug 'ervandew/supertab' "Tab completion
Plug 'godlygeek/tabular' "Format tables
Plug 'reedes/vim-pencil' "Auto apply textwidth formatting in real time
Plug 'chilicuil/vim-sprunge' "Dump buffer to a pastebin
Plug 'tpope/vim-vinegar' "Improve internal file browser
Plug 'junegunn/fzf' "Navigate buffers, history, etc
Plug 'junegunn/fzf.vim' "Navigate buffers, history, etc
Plug 'tpope/vim-commentary' "Comment/uncomment a range
Plug 'tpope/vim-surround' "Commands to manipulate surrounding tags/quotes/other
" Syntax
Plug 'plasticboy/vim-markdown' "Markdown support
Plug 'PProvost/vim-ps1' "Powershell support
call plug#end()

" Fzf buffers
nnoremap <silent> <Leader>b :Buffers<CR>
" Fzf history
nnoremap <silent> <Leader>h :History<CR>
" Fzf commands
nnoremap <silent> <Leader>; :Commands<CR>

" Marry goyo and limelight
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

" Load certain plugins for Markdown
" Todo: add toolbar maybe, toggle things
augroup pencil
  autocmd!
  autocmd FileType markdown call pencil#init()
    \| Goyo 80
augroup END

" Grey comments, must be declared after Vim-plug
highlight Comment ctermfg=8 guifg=#808080
